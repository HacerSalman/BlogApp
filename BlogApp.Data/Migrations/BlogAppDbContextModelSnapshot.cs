// <auto-generated />
using System;
using BlogApp.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogApp.Data.Migrations
{
    [DbContext(typeof(BlogAppDbContext))]
    partial class BlogAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("BlogApp.Data.Entities.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<long>("CommentCount")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("SeoAuthor")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("seo_author");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("seo_description");

                    b.Property<string>("SeoTags")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("seo_tags");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("title");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("update_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("SeoAuthor");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserId");

                    b.ToTable("article_tab");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.ToTable("category_tab");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("article_id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("text");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("ParentId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.ToTable("comment_tab");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Email")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("email");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("name");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("Password")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("password");

                    b.Property<string>("Picture")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("surname");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("surname");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("user_type");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("update_time");

                    b.Property<Guid>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("char(128)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Email");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user_tab");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("CreateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("create_time");

                    b.Property<string>("Modifier")
                        .HasColumnType("longtext")
                        .HasColumnName("modifier");

                    b.Property<string>("Owner")
                        .HasColumnType("longtext")
                        .HasColumnName("owner");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("status");

                    b.Property<long>("UpdateTime")
                        .HasColumnType("bigint")
                        .HasColumnName("update_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Role");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserId");

                    b.ToTable("user_role_tab");
                });

            modelBuilder.Entity("BlogApp.Data.Enums.EntityStatus", b =>
                {
                    b.Property<string>("V")
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("v");

                    b.HasKey("V");

                    b.ToTable("entity_status_tab");

                    b.HasData(
                        new
                        {
                            V = "ACTIVE"
                        },
                        new
                        {
                            V = "PASSIVE"
                        },
                        new
                        {
                            V = "DELETED"
                        });
                });

            modelBuilder.Entity("BlogApp.Data.Enums.Role", b =>
                {
                    b.Property<string>("V")
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("v");

                    b.HasKey("V");

                    b.ToTable("role_tab");

                    b.HasData(
                        new
                        {
                            V = "BLOG_WRITE"
                        },
                        new
                        {
                            V = "BLOG_READ"
                        },
                        new
                        {
                            V = "COMMENT_WRITE"
                        },
                        new
                        {
                            V = "COMMENT_READ"
                        });
                });

            modelBuilder.Entity("BlogApp.Data.Enums.UserType", b =>
                {
                    b.Property<string>("V")
                        .HasColumnType("VARCHAR(32)")
                        .HasColumnName("v");

                    b.HasKey("V");

                    b.ToTable("user_type_tab");

                    b.HasData(
                        new
                        {
                            V = "ADMIN"
                        },
                        new
                        {
                            V = "MEMBER"
                        },
                        new
                        {
                            V = "GUEST"
                        });
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Article", b =>
                {
                    b.HasOne("BlogApp.Data.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Data.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Category", b =>
                {
                    b.HasOne("BlogApp.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Comment", b =>
                {
                    b.HasOne("BlogApp.Data.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Data.Entities.Comment", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BlogApp.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.User", b =>
                {
                    b.HasOne("BlogApp.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Data.Enums.UserType", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogApp.Data.Entities.UserRole", b =>
                {
                    b.HasOne("BlogApp.Data.Enums.Role", null)
                        .WithMany()
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Data.Enums.EntityStatus", null)
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlogApp.Data.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("BlogApp.Data.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
